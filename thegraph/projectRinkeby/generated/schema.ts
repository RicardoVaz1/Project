// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ApprovedMerchantContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ApprovedMerchantContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovedMerchantContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovedMerchantContract", id.toString(), this);
    }
  }

  static load(id: string): ApprovedMerchantContract | null {
    return changetype<ApprovedMerchantContract | null>(
      store.get("ApprovedMerchantContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Approved(): boolean {
    let value = this.get("Approved");
    return value!.toBoolean();
  }

  set Approved(value: boolean) {
    this.set("Approved", Value.fromBoolean(value));
  }
}

export class CreateMerchantContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CreateMerchantContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreateMerchantContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreateMerchantContract", id.toString(), this);
    }
  }

  static load(id: string): CreateMerchantContract | null {
    return changetype<CreateMerchantContract | null>(
      store.get("CreateMerchantContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ID(): BigInt {
    let value = this.get("ID");
    return value!.toBigInt();
  }

  set ID(value: BigInt) {
    this.set("ID", Value.fromBigInt(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get MerchantAddress(): Bytes {
    let value = this.get("MerchantAddress");
    return value!.toBytes();
  }

  set MerchantAddress(value: Bytes) {
    this.set("MerchantAddress", Value.fromBytes(value));
  }

  get MerchantName(): string {
    let value = this.get("MerchantName");
    return value!.toString();
  }

  set MerchantName(value: string) {
    this.set("MerchantName", Value.fromString(value));
  }
}

export class NewMerchantContractApproved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NewMerchantContractApproved entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewMerchantContractApproved must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewMerchantContractApproved", id.toString(), this);
    }
  }

  static load(id: string): NewMerchantContractApproved | null {
    return changetype<NewMerchantContractApproved | null>(
      store.get("NewMerchantContractApproved", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }
}

export class PausedMerchantContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PausedMerchantContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PausedMerchantContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PausedMerchantContract", id.toString(), this);
    }
  }

  static load(id: string): PausedMerchantContract | null {
    return changetype<PausedMerchantContract | null>(
      store.get("PausedMerchantContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Paused(): boolean {
    let value = this.get("Paused");
    return value!.toBoolean();
  }

  set Paused(value: boolean) {
    this.set("Paused", Value.fromBoolean(value));
  }
}

export class SaveHistoric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SaveHistoric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SaveHistoric must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SaveHistoric", id.toString(), this);
    }
  }

  static load(id: string): SaveHistoric | null {
    return changetype<SaveHistoric | null>(store.get("SaveHistoric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Sells(): BigInt {
    let value = this.get("Sells");
    return value!.toBigInt();
  }

  set Sells(value: BigInt) {
    this.set("Sells", Value.fromBigInt(value));
  }

  get Refunds(): BigInt {
    let value = this.get("Refunds");
    return value!.toBigInt();
  }

  set Refunds(value: BigInt) {
    this.set("Refunds", Value.fromBigInt(value));
  }

  get Purchases(): BigInt {
    let value = this.get("Purchases");
    return value!.toBigInt();
  }

  set Purchases(value: BigInt) {
    this.set("Purchases", Value.fromBigInt(value));
  }

  get Cancellations(): BigInt {
    let value = this.get("Cancellations");
    return value!.toBigInt();
  }

  set Cancellations(value: BigInt) {
    this.set("Cancellations", Value.fromBigInt(value));
  }
}

export class VoteNewMerchantContractApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VoteNewMerchantContractApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoteNewMerchantContractApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoteNewMerchantContractApproval", id.toString(), this);
    }
  }

  static load(id: string): VoteNewMerchantContractApproval | null {
    return changetype<VoteNewMerchantContractApproval | null>(
      store.get("VoteNewMerchantContractApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Voter(): Bytes {
    let value = this.get("Voter");
    return value!.toBytes();
  }

  set Voter(value: Bytes) {
    this.set("Voter", Value.fromBytes(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }
}

export class ApprovedMerchant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovedMerchant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovedMerchant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovedMerchant", id.toString(), this);
    }
  }

  static load(id: string): ApprovedMerchant | null {
    return changetype<ApprovedMerchant | null>(
      store.get("ApprovedMerchant", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get ApprovedMerchant(): boolean {
    let value = this.get("ApprovedMerchant");
    return value!.toBoolean();
  }

  set ApprovedMerchant(value: boolean) {
    this.set("ApprovedMerchant", Value.fromBoolean(value));
  }
}

export class Buy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Buy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Buy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Buy", id.toString(), this);
    }
  }

  static load(id: string): Buy | null {
    return changetype<Buy | null>(store.get("Buy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get PurchaseID(): BigInt {
    let value = this.get("PurchaseID");
    return value!.toBigInt();
  }

  set PurchaseID(value: BigInt) {
    this.set("PurchaseID", Value.fromBigInt(value));
  }

  get DateF(): BigInt {
    let value = this.get("DateF");
    return value!.toBigInt();
  }

  set DateF(value: BigInt) {
    this.set("DateF", Value.fromBigInt(value));
  }

  get BuyerAddress(): Bytes {
    let value = this.get("BuyerAddress");
    return value!.toBytes();
  }

  set BuyerAddress(value: Bytes) {
    this.set("BuyerAddress", Value.fromBytes(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }
}

export class Complete extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Complete entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Complete must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Complete", id.toString(), this);
    }
  }

  static load(id: string): Complete | null {
    return changetype<Complete | null>(store.get("Complete", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get PurchaseID(): BigInt {
    let value = this.get("PurchaseID");
    return value!.toBigInt();
  }

  set PurchaseID(value: BigInt) {
    this.set("PurchaseID", Value.fromBigInt(value));
  }
}

export class CreatePurchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreatePurchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreatePurchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreatePurchase", id.toString(), this);
    }
  }

  static load(id: string): CreatePurchase | null {
    return changetype<CreatePurchase | null>(store.get("CreatePurchase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Date(): BigInt {
    let value = this.get("Date");
    return value!.toBigInt();
  }

  set Date(value: BigInt) {
    this.set("Date", Value.fromBigInt(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }

  get EscrowTime(): BigInt {
    let value = this.get("EscrowTime");
    return value!.toBigInt();
  }

  set EscrowTime(value: BigInt) {
    this.set("EscrowTime", Value.fromBigInt(value));
  }
}

export class Historic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Historic entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Historic must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Historic", id.toString(), this);
    }
  }

  static load(id: string): Historic | null {
    return changetype<Historic | null>(store.get("Historic", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Sells(): BigInt {
    let value = this.get("Sells");
    return value!.toBigInt();
  }

  set Sells(value: BigInt) {
    this.set("Sells", Value.fromBigInt(value));
  }

  get Refunds(): BigInt {
    let value = this.get("Refunds");
    return value!.toBigInt();
  }

  set Refunds(value: BigInt) {
    this.set("Refunds", Value.fromBigInt(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OwnershipTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class PausedWithdrawals extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PausedWithdrawals entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PausedWithdrawals must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PausedWithdrawals", id.toString(), this);
    }
  }

  static load(id: string): PausedWithdrawals | null {
    return changetype<PausedWithdrawals | null>(
      store.get("PausedWithdrawals", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get PausedWithdrawals(): boolean {
    let value = this.get("PausedWithdrawals");
    return value!.toBoolean();
  }

  set PausedWithdrawals(value: boolean) {
    this.set("PausedWithdrawals", Value.fromBoolean(value));
  }
}

export class Refund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Refund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Refund must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Refund", id.toString(), this);
    }
  }

  static load(id: string): Refund | null {
    return changetype<Refund | null>(store.get("Refund", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get BuyerAddress(): Bytes {
    let value = this.get("BuyerAddress");
    return value!.toBytes();
  }

  set BuyerAddress(value: Bytes) {
    this.set("BuyerAddress", Value.fromBytes(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }
}

export class TopUpMyContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TopUpMyContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TopUpMyContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TopUpMyContract", id.toString(), this);
    }
  }

  static load(id: string): TopUpMyContract | null {
    return changetype<TopUpMyContract | null>(store.get("TopUpMyContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }
}
