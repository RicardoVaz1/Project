// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ApprovedMerchantContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ApprovedMerchantContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovedMerchantContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovedMerchantContract", id.toString(), this);
    }
  }

  static load(id: string): ApprovedMerchantContract | null {
    return changetype<ApprovedMerchantContract | null>(
      store.get("ApprovedMerchantContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get MerchantName(): string {
    let value = this.get("MerchantName");
    return value!.toString();
  }

  set MerchantName(value: string) {
    this.set("MerchantName", Value.fromString(value));
  }

  get Approved(): boolean {
    let value = this.get("Approved");
    return value!.toBoolean();
  }

  set Approved(value: boolean) {
    this.set("Approved", Value.fromBoolean(value));
  }
}

export class Buy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Buy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Buy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Buy", id.toString(), this);
    }
  }

  static load(id: string): Buy | null {
    return changetype<Buy | null>(store.get("Buy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get IDPurchase(): BigInt {
    let value = this.get("IDPurchase");
    return value!.toBigInt();
  }

  set IDPurchase(value: BigInt) {
    this.set("IDPurchase", Value.fromBigInt(value));
  }

  get DateFinished(): BigInt {
    let value = this.get("DateFinished");
    return value!.toBigInt();
  }

  set DateFinished(value: BigInt) {
    this.set("DateFinished", Value.fromBigInt(value));
  }

  get BuyerAddress(): Bytes {
    let value = this.get("BuyerAddress");
    return value!.toBytes();
  }

  set BuyerAddress(value: Bytes) {
    this.set("BuyerAddress", Value.fromBytes(value));
  }

  get PurchaseAmount(): BigInt {
    let value = this.get("PurchaseAmount");
    return value!.toBigInt();
  }

  set PurchaseAmount(value: BigInt) {
    this.set("PurchaseAmount", Value.fromBigInt(value));
  }

  get PurchaseStatus(): BigInt {
    let value = this.get("PurchaseStatus");
    return value!.toBigInt();
  }

  set PurchaseStatus(value: BigInt) {
    this.set("PurchaseStatus", Value.fromBigInt(value));
  }
}

export class Complete extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Complete entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Complete must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Complete", id.toString(), this);
    }
  }

  static load(id: string): Complete | null {
    return changetype<Complete | null>(store.get("Complete", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get IDPurchase(): BigInt {
    let value = this.get("IDPurchase");
    return value!.toBigInt();
  }

  set IDPurchase(value: BigInt) {
    this.set("IDPurchase", Value.fromBigInt(value));
  }
}

export class CreatePurchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreatePurchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreatePurchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreatePurchase", id.toString(), this);
    }
  }

  static load(id: string): CreatePurchase | null {
    return changetype<CreatePurchase | null>(store.get("CreatePurchase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get IDPurchase(): BigInt {
    let value = this.get("IDPurchase");
    return value!.toBigInt();
  }

  set IDPurchase(value: BigInt) {
    this.set("IDPurchase", Value.fromBigInt(value));
  }

  get DateCreated(): BigInt {
    let value = this.get("DateCreated");
    return value!.toBigInt();
  }

  set DateCreated(value: BigInt) {
    this.set("DateCreated", Value.fromBigInt(value));
  }

  get PurchaseAmount(): BigInt {
    let value = this.get("PurchaseAmount");
    return value!.toBigInt();
  }

  set PurchaseAmount(value: BigInt) {
    this.set("PurchaseAmount", Value.fromBigInt(value));
  }

  get EscrowTime(): BigInt {
    let value = this.get("EscrowTime");
    return value!.toBigInt();
  }

  set EscrowTime(value: BigInt) {
    this.set("EscrowTime", Value.fromBigInt(value));
  }

  get PurchaseStatus(): BigInt {
    let value = this.get("PurchaseStatus");
    return value!.toBigInt();
  }

  set PurchaseStatus(value: BigInt) {
    this.set("PurchaseStatus", Value.fromBigInt(value));
  }
}

export class CreatedMerchantContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CreatedMerchantContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreatedMerchantContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreatedMerchantContract", id.toString(), this);
    }
  }

  static load(id: string): CreatedMerchantContract | null {
    return changetype<CreatedMerchantContract | null>(
      store.get("CreatedMerchantContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get MerchantAddress(): Bytes {
    let value = this.get("MerchantAddress");
    return value!.toBytes();
  }

  set MerchantAddress(value: Bytes) {
    this.set("MerchantAddress", Value.fromBytes(value));
  }

  get MerchantName(): string {
    let value = this.get("MerchantName");
    return value!.toString();
  }

  set MerchantName(value: string) {
    this.set("MerchantName", Value.fromString(value));
  }
}

export class Historic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Historic entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Historic must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Historic", id.toString(), this);
    }
  }

  static load(id: string): Historic | null {
    return changetype<Historic | null>(store.get("Historic", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Sells(): BigInt {
    let value = this.get("Sells");
    return value!.toBigInt();
  }

  set Sells(value: BigInt) {
    this.set("Sells", Value.fromBigInt(value));
  }

  get Refunds(): BigInt {
    let value = this.get("Refunds");
    return value!.toBigInt();
  }

  set Refunds(value: BigInt) {
    this.set("Refunds", Value.fromBigInt(value));
  }
}

export class PausedMerchantContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PausedMerchantContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PausedMerchantContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PausedMerchantContract", id.toString(), this);
    }
  }

  static load(id: string): PausedMerchantContract | null {
    return changetype<PausedMerchantContract | null>(
      store.get("PausedMerchantContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Paused(): boolean {
    let value = this.get("Paused");
    return value!.toBoolean();
  }

  set Paused(value: boolean) {
    this.set("Paused", Value.fromBoolean(value));
  }
}

export class Refund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Refund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Refund must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Refund", id.toString(), this);
    }
  }

  static load(id: string): Refund | null {
    return changetype<Refund | null>(store.get("Refund", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get IDPurchase(): BigInt {
    let value = this.get("IDPurchase");
    return value!.toBigInt();
  }

  set IDPurchase(value: BigInt) {
    this.set("IDPurchase", Value.fromBigInt(value));
  }

  get Date(): BigInt {
    let value = this.get("Date");
    return value!.toBigInt();
  }

  set Date(value: BigInt) {
    this.set("Date", Value.fromBigInt(value));
  }

  get BuyerAddress(): Bytes {
    let value = this.get("BuyerAddress");
    return value!.toBytes();
  }

  set BuyerAddress(value: Bytes) {
    this.set("BuyerAddress", Value.fromBytes(value));
  }

  get RefundAmount(): BigInt {
    let value = this.get("RefundAmount");
    return value!.toBigInt();
  }

  set RefundAmount(value: BigInt) {
    this.set("RefundAmount", Value.fromBigInt(value));
  }

  get PurchaseStatus(): BigInt {
    let value = this.get("PurchaseStatus");
    return value!.toBigInt();
  }

  set PurchaseStatus(value: BigInt) {
    this.set("PurchaseStatus", Value.fromBigInt(value));
  }
}

export class TopUpMyContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TopUpMyContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TopUpMyContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TopUpMyContract", id.toString(), this);
    }
  }

  static load(id: string): TopUpMyContract | null {
    return changetype<TopUpMyContract | null>(store.get("TopUpMyContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }
}

export class VoteNewMerchantContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VoteNewMerchantContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoteNewMerchantContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoteNewMerchantContract", id.toString(), this);
    }
  }

  static load(id: string): VoteNewMerchantContract | null {
    return changetype<VoteNewMerchantContract | null>(
      store.get("VoteNewMerchantContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Voter(): Bytes {
    let value = this.get("Voter");
    return value!.toBytes();
  }

  set Voter(value: Bytes) {
    this.set("Voter", Value.fromBytes(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get MerchantContractAddress(): Bytes {
    let value = this.get("MerchantContractAddress");
    return value!.toBytes();
  }

  set MerchantContractAddress(value: Bytes) {
    this.set("MerchantContractAddress", Value.fromBytes(value));
  }

  get Balance(): BigInt {
    let value = this.get("Balance");
    return value!.toBigInt();
  }

  set Balance(value: BigInt) {
    this.set("Balance", Value.fromBigInt(value));
  }
}
